
//- (id)init {
//    self = [super init];
//    if (self) {
//
//    }
//
//    return self;
//}

//- (BOOL)validateUserInterfaceItem:(id <NSValidatedUserInterfaceItem>)anItem {
////    NSLog(@"validating UI item in App Controller %@",anItem) ;
//    return [super validateUserInterfaceItem:anItem];
//}

//- (BOOL)validateMenuItem:(NSMenuItem *)item {
//    NSLog(@"validating in App Controller menu item %@",item) ;
////    return [super validateUserInterfaceItem:item];
//    if(item.tag==77){
//        NSLog(@"should be returning true!");
//        return YES;
//    }
//    else{
//        return [super validateMenuItem:item];
//    }
//}
//    NSInteger result = [panel runModalForDirectory:NSHomeDirectory() file:nil types:nil];

//        NSString *stacksDocumentPath = [panel.directoryURL.path stringByAppendingFormat:@"/%@.stacks",panel.directoryURL.path.lastPathComponent];

//        StacksDocument *stacksDocument = [stacksConverter loadLociAndGenotypes:[panel.directoryURL.path stringByAppendingString:@"/"]];
//        [stacksConverter loadLociAndGenotypes:[panel.directoryURL.path stringByAppendingString:@"/"]];


//        [self startProgressPanel:@"starting"];
//        [progressController showWindow:self];


//        [progressController showWindow:[[StacksApplicationController sharedDocumentController] window] ]];


//        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
//            [NSApp runModalForWindow:[progressController window]];

//            [stacksConverter loadLociAndGenotypes:[panel.directoryURL.path stringByAppendingString:@"/"] progressBar:nil];
//        NSAlert *alert = [[NSAlert alloc] init] ;
//        [alert addButtonWithTitle:@"OK"];
//        [alert addButtonWithTitle:@"Cancel"];
//        [alert setMessageText:@"Sheet Title"];
//        [alert setInformativeText:@"Message text goes here."];
//        [alert setAlertStyle:NSWarningAlertStyle];
////        [alert beginSheetModalForWindow:mainWindow modalDelegate:self didEndSelector:@selector(someMethodDidEnd:returnCode:contextInfo:) contextInfo:nil];
//        [alert beginSheetModalForWindow:[NSApp mainWindow] modalDelegate:self didEndSelector:@selector(someMethodDidEnd:returnCode:contextInfo:) contextInfo:nil];
//        });

//        NSAlert *alert = [[NSAlert alloc] init] ;
//        [alert addButtonWithTitle:@"OK"];
//        [alert addButtonWithTitle:@"Cancel"];
//        [alert setMessageText:@"Sheet Title"];
//        [alert setInformativeText:@"Message text goes here."];
//        [alert setAlertStyle:NSWarningAlertStyle];
//        [alert beginSheetModalForWindow:mainWindow modalDelegate:self didEndSelector:@selector(someMethodDidEnd:returnCode:contextInfo:) contextInfo:nil];
//        [alert beginSheetModalForWindow:[NSApp mainWindow] modalDelegate:self didEndSelector:@selector(someMethodDidEnd:returnCode:contextInfo:) contextInfo:nil];

//        [NSApp beginSheet:[progressController window] modalForWindow:[NSApp mainWindow] modalDelegate:nil didEndSelector:NULL contextInfo:NULL];
//        [NSApp beginSheet:[progressController window] modalForWindow:[StacksApplicationController sharedDocumentController ] modalDelegate:nil didEndSelector:NULL contextInfo:NULL];
//        [NSApp beginSheet:[progressController window] modalForWindow:[[StacksDocumentController sharedDocumentController ] window] modalDelegate:nil didEndSelector:NULL contextInfo:NULL];

//            [progressController showWindow:[StacksDocumentController sharedDocumentController]];


//        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
//            [stacksConverter loadLociAndGenotypes:[panel.directoryURL.path stringByAppendingString:@"/"] progressWindow: progressController];
//        });
//        [NSApp stopModal];

        // if any other documents are around

        // set the file menu to enable "auto"

//        NSMenu *mainMenu = [[NSApplication sharedApplication] mainMenu];
//        NSMenu *appMenu = [[mainMenu itemAtIndex:1] submenu];
//        NSMenuItem *menuItem = [appMenu itemAtIndex:3];
//        [menuItem setEnabled:false];

//        for (NSMenuItem *item in [appMenu itemArray]) {
//            NSLog(@"%@", [item title]);
//        }

//                [[StacksDocumentController sharedDocumentController] perform]



//- (void) startIndeterminateProgressPanel:(NSString *)message
//{
//    // Display a progress panel as a sheet
//    self.progressMessage = message;
//    [progressIndicator setIndeterminate: YES];
//    [progressIndicator startAnimation: self];
//    [progressCancelButton setEnabled: NO];
//    [NSApp beginSheet: progressPanel
//       modalForWindow: window
//        modalDelegate: self
//       didEndSelector: @selector(progressDidEnd: returnCode: contextInfo:)
//          contextInfo: NULL];
//}
- (void)startProgressPanel:(NSString *)message {
//    [loadProgress displayIfNeeded];
//    [loadProgress setIndeterminate:false];
//    [loadProgress setDisplayedWhenStopped:false];
//    [loadProgress setNeedsDisplay:true];

//    [self beginSheetModalForWindow:[ progressPanel window]  modalDelegate:self  didEndSelector:@ selector( alertEnded:code:context:)  contextInfo:NULL];


//    [NSApp beginSheet: progressPanel
//       modalForWindow: self.windowForSheet
//        modalDelegate: self
//       didEndSelector: nil
//          contextInfo: nil];
//    [NSApp runModalForWindow: progressPanel];
//    // Dialog is up here.
//    [NSApp endSheet: progressPanel];
//    [progressPanel orderOut: self];

//    [NSApp beginSheet: progressPanel
//       modalForWindow: self.windowForSheet
//        modalDelegate: nil
//       didEndSelector: nil
//          contextInfo: nil];

    // Display a progress panel as a sheet
//    self.progressMessage = message;
//    [progressIndicator setIndeterminate: YES];
//    [progressIndicator startAnimation: self];
//    [progressCancelButton setEnabled: NO];

    // TODO: find acces to the modal window we are using
//    [NSApp beginSheet: progressPanel
//       modalForWindow: self.windowForSheet
//        modalDelegate: self
//       didEndSelector: @selector(progressDidEnd: returnCode: contextInfo:)
//          contextInfo: NULL];
}

- (void)progressDidEnd:(NSWindow *)panel returnCode:(int)returnCode contextInfo:(void *)context {
//    xpc_connection_t connection = (xpc_connection_t)context;
//
//    if (returnCode != 0) {
//        // The cancel button was pressed.
//        NSBeep();
//    }
//
//    if (connection != NULL) {
//        // Cancel and release the anonymous connection which signals the remote
//        // service to stop, if working.
//        xpc_connection_cancel(connection);
//        xpc_release(connection);
//    }
}


- (void)stopProgressPanel {

//    [progressPanel orderOut: self];
//    [NSApp endSheet: progressPanel returnCode: 0];
}

- (IBAction)cancelAction:(id)sender {

//    [progressPanel orderOut: self];
//    [NSApp endSheet: progressPanel returnCode: 1];
}

//
- (void)someMethodDidEnd:(NSAlert *)alert returnCode:(int)returnCode contextInfo:(void *)contextInfo {
    if (returnCode == NSAlertFirstButtonReturn) {
        // Do something
    }
}
