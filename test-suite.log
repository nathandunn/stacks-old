===================================
   Stacks 1.18: ./test-suite.log
===================================

# TOTAL: 45
# PASS:  42
# SKIP:  3
# XFAIL: 0
# FAIL:  0
# XPASS: 0
# ERROR: 0

.. contents:: :depth: 2

PASS: tests/kmer_filter.t
=========================

/bin/ls: cannot access /home/rubyg/src/stacks_over_https/stacks.BAK/tests/kmer_filter/004_outfasta/eout: No such file or directory
1..5
ok 1 - filter out rare kmers
PASS: tests/kmer_filter.t 1 - filter out rare kmers
ok 2 - filter out overly abundant kmers
PASS: tests/kmer_filter.t 2 - filter out overly abundant kmers
ok 3 - set max kmer frequency for abundance filtering
PASS: tests/kmer_filter.t 3 - set max kmer frequency for abundance filtering
ok 4 # skip input gzfastq: kmer_filter -i gzfastq -f /home/rubyg/src/stacks_over_https/stacks.BAK/tests/kmer_filter/003_ingzfastq/in/in.fastq.gz -o out
SKIP: tests/kmer_filter.t 4 # SKIP input gzfastq: kmer_filter -i gzfastq -f /home/rubyg/src/stacks_over_https/stacks.BAK/tests/kmer_filter/003_ingzfastq/in/in.fastq.gz -o out
ok 5 - output fastq
PASS: tests/kmer_filter.t 5 - output fastq
# All 5 tests successful or skipped

PASS: tests/ustacks.t
=====================

./tests/ustacks.t: line 12: ref_map: command not found
1..21
ok 1 - input gzipped fastq
PASS: tests/ustacks.t 1 - input gzipped fastq
ok 2 - input fastq
PASS: tests/ustacks.t 2 - input fastq
ok 3 - input fasta
PASS: tests/ustacks.t 3 - input fasta
ok 4 - inpus gzipped fasta
PASS: tests/ustacks.t 4 - inpus gzipped fasta
ok 5 - set sample ID=1 (AKA MySQL column 2)
PASS: tests/ustacks.t 5 - set sample ID=1 (AKA MySQL column 2)
ok 6 - specify minimum depth of coverage required to call a stack
PASS: tests/ustacks.t 6 - specify minimum depth of coverage required to call a stack
ok 7 - specify maximum distance between stacks
PASS: tests/ustacks.t 7 - specify maximum distance between stacks
ok 8 - specify max distance to align secondary reads to primary stacks
PASS: tests/ustacks.t 8 - specify max distance to align secondary reads to primary stacks
ok 9 # skip retain unused reads: ustacks -t gzfastq -f /home/rubyg/src/stacks_over_https/stacks.BAK/tests/ustacks/008_retain/in -o /home/rubyg/src/stacks_over_https/stacks.BAK/tests/ustacks_out -R
SKIP: tests/ustacks.t 9 # SKIP retain unused reads: ustacks -t gzfastq -f /home/rubyg/src/stacks_over_https/stacks.BAK/tests/ustacks/008_retain/in -o /home/rubyg/src/stacks_over_https/stacks.BAK/tests/ustacks_out -R
ok 10 - disable haplotype calling from secondary reads
PASS: tests/ustacks.t 10 - disable haplotype calling from secondary reads
ok 11 - remove highly repetative (likely error) reads
PASS: tests/ustacks.t 11 - remove highly repetative (likely error) reads
ok 12 - enable deleveraging algorithm
PASS: tests/ustacks.t 12 - enable deleveraging algorithm
ok 13 - specify max number of stacks at a de novo locus
PASS: tests/ustacks.t 13 - specify max number of stacks at a de novo locus
ok 14 - specify chi square significance level for calling heteroz/homozygote
PASS: tests/ustacks.t 14 - specify chi square significance level for calling heteroz/homozygote
ok 15 - specify chi square significance level for calling heteroz/homozygote
PASS: tests/ustacks.t 15 - specify chi square significance level for calling heteroz/homozygote
ok 16 - specify chi square significance level for calling heteroz/homozygote
PASS: tests/ustacks.t 16 - specify chi square significance level for calling heteroz/homozygote
ok 17 - specify chi square significance level for calling heteroz/homozygote
PASS: tests/ustacks.t 17 - specify chi square significance level for calling heteroz/homozygote
ok 18 - For bounded model, specify upper bound
PASS: tests/ustacks.t 18 - For bounded model, specify upper bound
ok 19 - For bounded model, specify lower bound
PASS: tests/ustacks.t 19 - For bounded model, specify lower bound
ok 20 - For bounded model, specify upper and lower bounds
PASS: tests/ustacks.t 20 - For bounded model, specify upper and lower bounds
ok 21 - For fixed model, specify barcode error frequency rate
PASS: tests/ustacks.t 21 - For fixed model, specify barcode error frequency rate
# All 21 tests successful or skipped

PASS: tests/pstacks.t
=====================

1..8
ok 1 - input bam
PASS: tests/pstacks.t 1 - input bam
ok 2 - input sam
PASS: tests/pstacks.t 2 - input sam
ok 3 # skip input bowtie - need data input file type: pstacks -t bowtie -f /home/rubyg/src/stacks_over_https/stacks.BAK/tests/pstacks/002_inbowtie/in/??? -o /home/rubyg/src/stacks_over_https/stacks.BAK/tests/pstacks_out
SKIP: tests/pstacks.t 3 # SKIP input bowtie - need data input file type: pstacks -t bowtie -f /home/rubyg/src/stacks_over_https/stacks.BAK/tests/pstacks/002_inbowtie/in/??? -o /home/rubyg/src/stacks_over_https/stacks.BAK/tests/pstacks_out
ok 4 - minimum coverage depth for contig report
PASS: tests/pstacks.t 4 - minimum coverage depth for contig report
ok 5 - R^2 significance level of 0.1 for calling homozygote/heterozygote
PASS: tests/pstacks.t 5 - R^2 significance level of 0.1 for calling homozygote/heterozygote
ok 6 - R^2 significance level of 0.05 for calling homozygote/heterozygote
PASS: tests/pstacks.t 6 - R^2 significance level of 0.05 for calling homozygote/heterozygote
ok 7 - R^2 significance level of 0.01 for calling homozygote/heterozygote
PASS: tests/pstacks.t 7 - R^2 significance level of 0.01 for calling homozygote/heterozygote
ok 8 - R^2 significance level of 0.001 for calling homozygote/heterozygote
PASS: tests/pstacks.t 8 - R^2 significance level of 0.001 for calling homozygote/heterozygote
# All 8 tests successful or skipped
# All 8 tests successful or skipped

